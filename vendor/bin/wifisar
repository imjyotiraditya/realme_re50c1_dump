#!/vendor/bin/sh

SAR_EXEC_FILE="/vendor/bin/vendor_cmd_tool"
SAR_CFG_FILE="/vendor/etc/wifi/sar-vendor-cmd.xml"

WIFI_SAR_DISABLE_CMD_BODY="--ENABLE 5 --NUM_SPECS 0 --END_CMD"

FCC_COUNTRY_LIST=("MX" "US")
CE_COUNTRY_LIST=("ID" "NP" "NG" "IQ" "HK" "MY" "MM" "EG" "JO" "TH" "PK" "MA" "KE" "LB" "KH" "LK" "DZ" "SA" "PS" "PH" "UA" "BD" "TN" "AE" "VN" "MO" "BL" "JP")
EUROPE_COUNTRY_LIST=("AT" "BE" "BG" "CY" "HR" "CZ" "DK" "EE" "FI" "FR" "DE" "GR" "HU" "IE" "IT" "LV" "LT" "LU" "MT" "NL" "PL" "PT" "RO" "SK" "SI" "ES" "GB" "SE" "CH" "NO" "IS" "LI" "TR" "MD" "RU" "UA" "KZ" "UZ" "AU" "NZ" "SG")

# temp static value, should get from sysfs based on STA/SAP on/off status
# for android O, interface of SAP is softap0
get_wifi_iface() {
	echo "wlan0"
}

build_cmd_header() {
	iface="$(get_wifi_iface)"
	echo "-f $SAR_CFG_FILE -i $iface --START_CMD --SAR_SET"
}

build_cmd_body() {

	[ "$#" -ne "2" ] && return

	echo "--ENABLE 6 --NUM_SPECS 2 --SAR_SPEC 
	--NESTED_AUTO --BAND 0 --POW $1 --END_ATTR 
	--NESTED_AUTO --BAND 1 --POW $2 --END_ATTR 
	--END_ATTR --END_CMD"
}

build_cmd() {
	cHdr="$(build_cmd_header)"
	cBody="$(build_cmd_body $1 $2)"

	echo "$cHdr $cBody"
}

apply_sar() {
	cmd="$(build_cmd $1 $2)"
	echo "cmd=$cmd"

	$SAR_EXEC_FILE $cmd
}

is_fcc_country() {
	arr_len=${#FCC_COUNTRY_LIST[@]}
	for i in $(seq 0 $arr_len); do
		if [ "${FCC_COUNTRY_LIST[$i]}" == "$1" ]; then
			echo "true"
			return
		fi
	done
	
	echo "false"
}

is_ce_country() {
	arr_len=${#CE_COUNTRY_LIST[@]}
	for i in $(seq 0 $arr_len); do
		if [ "${CE_COUNTRY_LIST[$i]}" == "$1" ]; then
			echo "true"
			return
		fi
	done
	
	echo "false"
}

is_europe_country() {
	arr_len=${#EUROPE_COUNTRY_LIST[@]}
	for i in $(seq 0 $arr_len); do
		if [ "${EUROPE_COUNTRY_LIST[$i]}" == "$1" ]; then
			echo "true"
			return
		fi
	done
	
	echo "false"
}

get_sar_idx() {
	idx="0"

	[ "$#" -ne "8" ] && echo "$idx" && return
	
	cc="$1"
	wifi2g="$2"
	wifi5g="$3"
	modem="$4"
	screen_on="$5"
	test_card="$6"
	sensor_near="$7"
	earpiece="$8"
	
	# india
	if [ "$cc" == "IN" ]; then
		if [ "$earpiece" -eq "1" ]; then
			# wifi 2.4G or 5G only
			if [ "$modem" -eq "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="1"
			# wifi 2.4G and 5G
			elif [ "$modem" -eq "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="2"
			# wifi(2.4G or 5G) + modem
			elif [ "$modem" -ne "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="3"
			#wifi(2.4G and 5G) + modem
			elif [ "$modem" -ne "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="4"
			fi
		else
			# wifi 2.4G or 5G only
			if [ "$modem" -eq "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="5"
			# wifi 2.4G and 5G
			elif [ "$modem" -eq "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="6"
			# wifi(2.4G or 5G) + modem
			elif [ "$modem" -ne "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="7"
			#wifi(2.4G and 5G) + modem
			elif [ "$modem" -ne "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="8"
			fi
		fi
	# fcc country
	elif [ "$(is_fcc_country $cc)" == "true" ]; then
		#echo "fcc country"
		if [ "$earpiece" -eq "1" ]; then
			# wifi 2.4G or 5G only
			if [ "$modem" -eq "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="9"
			# wifi 2.4G and 5G
			elif [ "$modem" -eq "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="10"
			# wifi(2.4G or 5G) + modem
			elif [ "$modem" -ne "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="11"
			#wifi(2.4G and 5G) + modem
			elif [ "$modem" -ne "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="12"
			fi
		else
			# wifi 2.4G or 5G only
			if [ "$modem" -eq "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="13"
			# wifi 2.4G and 5G
			elif [ "$modem" -eq "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="14"
			# wifi(2.4G or 5G) + modem
			elif [ "$modem" -ne "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="15"
			#wifi(2.4G and 5G) + modem
			elif [ "$modem" -ne "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="16"
			fi
		fi
	# ce country
	elif [ "$(is_ce_country $cc)" == "true" ]; then
		#echo "ce country"
		if [ "$earpiece" -eq "1" ]; then
			# wifi 2.4G or 5G only
			if [ "$modem" -eq "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="17"
			# wifi 2.4G and 5G
			elif [ "$modem" -eq "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="18"
			# wifi(2.4G or 5G) + modem
			elif [ "$modem" -ne "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="19"
			#wifi(2.4G and 5G) + modem
			elif [ "$modem" -ne "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="20"
			fi
		else
			# wifi 2.4G or 5G only
			if [ "$modem" -eq "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="21"
			# wifi 2.4G and 5G
			elif [ "$modem" -eq "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="22"
			# wifi(2.4G or 5G) + modem
			elif [ "$modem" -ne "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="23"
			#wifi(2.4G and 5G) + modem
			elif [ "$modem" -ne "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="24"
			fi
		fi
	# europe country
	elif [ "$(is_europe_country $cc)" == "true" ]; then
		#echo "europe country"
		if [ "$earpiece" -eq "1" ]; then
			# wifi 2.4G or 5G only
			if [ "$modem" -eq "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="25"
			# wifi 2.4G and 5G
			elif [ "$modem" -eq "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="26"
			# wifi(2.4G or 5G) + modem
			elif [ "$modem" -ne "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="27"
			#wifi(2.4G and 5G) + modem
			elif [ "$modem" -ne "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="28"
			fi
		else
			# wifi 2.4G or 5G only
			if [ "$modem" -eq "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="29"
			# wifi 2.4G and 5G
			elif [ "$modem" -eq "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="30"
			# wifi(2.4G or 5G) + modem
			elif [ "$modem" -ne "0" ] && ([ "$wifi2g" -eq "1" -a "$wifi5g" -eq "0" ] || [ "$wifi2g" -eq "0" -a "$wifi5g" -ne "0" ]); then
				idx="31"
			#wifi(2.4G and 5G) + modem
			elif [ "$modem" -ne "0" -a "$wifi2g" -eq "1" -a "$wifi5g" -ne "0" ]; then
				idx="32"
			fi
		fi
	fi
	
	echo "$idx"
}

get_sar_pwr() {
	project="$1"
	idx="$2"
	wifi2genable="$3"
	wifi5gband="$4"
	wifi5gkey="5G$wifi5gband"
	
	prj_sar_cfg_file="/mnt/vendor/persist/wifisar_$project".cfg
	if [ ! -f "$prj_sar_cfg_file" ]; then
		#echo "sar config file:$prj_sar_cfg_file not exist!"
		if [ -f "/mnt/vendor/persist/wifisar.cfg" ]; then
			#echo "use default wifisar.cfg"
			prj_sar_cfg_file="/mnt/vendor/persist/wifisar.cfg"
		else
			echo "40 40"
		fi
	fi
	
	wifi2gstr=$(cat $prj_sar_cfg_file | awk -F ";" '{
	if ($1 == "idx:""'$idx'") {
		if ("'$wifi2genable'" == "0")
			print "[2G4, 40]"
		else
			print $2
	}}')

	wifi5gstr=$(cat $prj_sar_cfg_file | awk -F ";" '{
	if ($1 == "idx:""'$idx'") {
		if ("'$wifi5gkey'" == "5G0")
			print "[5G0, 40]"
		else if ("'$wifi5gkey'" == "5G1")
			print $3
		else if ("'$wifi5gkey'" == "5G2")
			print $4
		else if ("'$wifi5gkey'" == "5G3")
			print $5
		else if ("'$wifi5gkey'" == "5G4")
			print $6
	}}')
	
	pwr2g=$(echo $wifi2gstr | awk -F "[][,]" '{print $(NF-1)}')
	pwr5g=$(echo $wifi5gstr | awk -F "[][,]" '{print $(NF-1)}')
	
	pwr2g=$(echo $pwr2g | tr -d [:space:])
	pwr5g=$(echo $pwr5g | tr -d [:space:])
	
	echo "$pwr2g $pwr5g"
}

disable_wifi_sar() {
	cmd_hdr="$(build_cmd_header)"
	cmd_body="$WIFI_SAR_DISABLE_CMD_BODY"
	
	cmd="$cmd_hdr $cmd_body"
	echo "cmd=$cmd"

	$SAR_EXEC_FILE $cmd
}

project_version=$(getprop "ro.separate.soft")
[ -z "$project_version" ] && return

# Note:
# 1. countryCode:wifi 2.4G enable(0/1):wifi 5G band(0-4):modem work type(0-3, disable/idle/4G/5G):screen on/off:isTestCard:SensorState:earPieceState.
sar_cmd=$(getprop "oppo.wifi.sar.idx" "")

# 1. get each parameter
cmd_array=(${sar_cmd//:/ })
array_len=${#cmd_array[@]}
[ "$array_len" -ne "8" ] && echo "Invalid sar cmd!" && return

country_code=${cmd_array[0]}
wifi2g=${cmd_array[1]}
wifi5g=${cmd_array[2]}
modem=${cmd_array[3]}
screen=${cmd_array[4]}
test_card=${cmd_array[5]}
sensor=${cmd_array[6]}
earpiece=${cmd_array[7]}

# 2. get sar index from current state
sarIdx=$(get_sar_idx "$country_code" "$wifi2g" "$wifi5g" "$modem" "$screen" "$test_card" "$sensor" "$earpiece")
echo "idx=$sarIdx"
[ "$sarIdx" -eq "0" ] && echo "Invalid sar index, skip" && disable_wifi_sar && return

# 3. get backoff power from sarIdx(note wifi5G B1/B2/B3/B4 have different power value)
pwr=$(get_sar_pwr "$project_version" "$sarIdx" "$wifi2g" "$wifi5g")
echo "pwr=$pwr"
pwr_array=(${pwr// / })
arr_len=${#pwr_array[@]}
[ "$arr_len" -ne "2" ] && echo "Invalid power array" && disable_wifi_sar && return

pwr2g=${pwr_array[0]}
pwr5g=${pwr_array[1]}

# 4. apply backoff power
apply_sar "$pwr2g" "$pwr5g"
